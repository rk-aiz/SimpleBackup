<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SimpleBackup">

    <local:BooleanToEnumConverter x:Key="BooleanToEnumConverter"/>
    <local:IndexConverter x:Key="IndexConverter"/>

    <Geometry x:Key="CompletePathIcon">
        M 50,-10 A 60,60 180 1 1 50,110 A 60,60 180 1 1 50,-10 Z
                M 15,49 L 40,68  L 83,31 L 95,43 L 40,88
                L 5,60 Z
    </Geometry>

    <Geometry x:Key="ErrorPathIcon">
        M 50,-10 A 60,60 180 1 1 50,110 A 60,60 180 1 1 50,-10 Z
                M 25,15 L 50,41 L 75,15 L 85,25 L 59,50
                L 85,75 L 75,85 L 50,59 L 25,85 L 15,75
                L 41,50 L 15,25 Z
    </Geometry>

    <ControlTemplate x:Key="ToggleSlider" TargetType="{x:Type ToggleButton}">
        <Grid Margin="20, 0" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="40" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="20" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="
                                (Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0:0:0.1"
                                   Value="#BAE1F7" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="
                                (Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="BlueLayer">
                                <EasingColorKeyFrame KeyTime="0:0:0.1"
                                   Value="#0080E0" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation From="0" To="1" Duration="0:0:0.3" 
                                 Storyboard.TargetName="BlueLayer" 
                                 Storyboard.TargetProperty="(Border.Opacity)">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut"  />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="
                                (Rectangle.Fill).(SolidColorBrush.Color)"
                                          Storyboard.TargetName="Thumb">
                                <EasingColorKeyFrame KeyTime="0:0:0.1"
                                   Value="#F0F0F0" />
                            </ColorAnimationUsingKeyFrames>
                            <DoubleAnimation From="0" To="21" Duration="0:0:0.1" 
                         Storyboard.TargetName="Thumb" 
                         Storyboard.TargetProperty="(Rectangle.RenderTransform).(TranslateTransform.X)">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut"  />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked">
                    <Storyboard>
                            <DoubleAnimation From="21" To="0" Duration="0:0:0.1" 
                         Storyboard.TargetName="Thumb" 
                         Storyboard.TargetProperty="(Rectangle.RenderTransform).(TranslateTransform.X)">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut"  />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!--
            <ContentPresenter
                Grid.ColumnSpan="2"
                HorizontalAlignment="Center"/>
            -->
            <Border x:Name="Border"
                Grid.Row="1" Grid.Column="1"
                Height="15"
                BorderThickness="1px"
                BorderBrush="#555555"
                Background="#DADADA">
                <Grid>
                    <Border x:Name="BlueLayer" Background="#40A0F0" Opacity="0"/>
                    <Rectangle x:Name="Thumb"
                        Margin="1"
                        Width="15"
                        Fill="#707070"
                        HorizontalAlignment="Left"
                        >
                        <Rectangle.RenderTransform>
                            <TranslateTransform X="0" Y="0"/>
                        </Rectangle.RenderTransform>
                    </Rectangle>
                </Grid>
            </Border>
            <Border Grid.Row="1" Grid.Column="0">
                <TextBlock
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center">
                    <TextBlock.Text>
                        <local:CultureAwareBinding
                                    Path="IsChecked"
                                    RelativeSource="{RelativeSource TemplatedParent}"
                                    Converter="{StaticResource BooleanToEnumConverter}"
                                    ConverterParameter="{x:Type local:ToggleStateMessage}">
                        </local:CultureAwareBinding>
                    </TextBlock.Text>
                </TextBlock>
            </Border>

        </Grid>
    </ControlTemplate>

    <Style x:Key="DirectoryPathTextBox" TargetType="{x:Type local:DirectoryPathTextBox}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip.IsOpen" Value="True"/>
            </Trigger>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTipService.ToolTip" Value="{
                                Binding Path=(Validation.Errors)[0].ErrorContent,
                                RelativeSource={RelativeSource Self}}"/>
                <Setter Property="ToolTip.IsOpen" Value="True"/>
                <Setter Property="Background" Value="#FF8888"/>
            </Trigger>
            <DataTrigger Binding="{Binding SettingLock, Source={x:Static local:StatusHelper.Instance}}" Value="true">
                <Setter Property="Foreground" Value="#404040"/>
                <Setter Property="Background" Value="#D0D0D0"/>
                <Setter Property="Cursor" Value="Arrow"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="#FF1C61F3"/>
        <Setter Property="Height" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator"
                                    ClipToBounds="true" Height="5"
                                    HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="BackupHistoryDataTemplate">
        <Grid HorizontalAlignment="Stretch">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="10" />
                    <RowDefinition Height="25" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.Resources>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding InSequence}" Value="False">
                                <Setter
                                    Property="TextBlock.Foreground"
                                    Value="#909090" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Resources>
                <TextBlock x:Name="index"
                    Grid.RowSpan="2" Grid.Column="0"
                    FontSize="18"
                    Text="{Binding Index, Converter={StaticResource IndexConverter}, Mode=OneWay}"/>
                <TextBlock x:Name="saveTime"
                    Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="1"
                    FontSize="12"
                    Visibility="Hidden"
                    Text="{Binding SaveTime, StringFormat={}{0:yyyy/MM/dd HH:mm:ss}, Mode=OneWay}"/>
                <TextBlock
                    Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="1"
                    FontSize="16"
                    HorizontalAlignment="Stretch"
                    ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Text}"
                    Text="{Binding FileName, Mode=OneWay}" TextTrimming="CharacterEllipsis" />
            </Grid>
            <ProgressBar x:Name="progress"
                Value="{Binding Progress, Mode=OneWay}"
                Style="{StaticResource ProgressBarStyle}"
                VerticalAlignment="Top"
                Margin="2"
                Visibility="Collapsed"/>
            <Path x:Name="statusIcon"
                HorizontalAlignment="Right"
                Width="12" Height="12"
                Margin="10, 0"
                Stretch="Fill"
                Visibility="Collapsed" Data="" />
            <Button Name="cancelButton" Visibility="Collapsed"
                    HorizontalAlignment="Right" Margin="2" Command="{Binding CancelCommand}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border Name="Border"
                                        Width="75" Height="24"
                                        Background="#80FFFFFF"
                                        CornerRadius="12">
                                        <Border HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Label Name="Label"
                                                Padding="0"
                                                FontSize="14"
                                                FontWeight="UltraBold"
                                                Foreground="#FF7862"
                                                Content="Cancel"/>
                                        </Border>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Cursor" Value="Hand" />
                                            <Setter TargetName="Border" Property="Background" Value="#D5FFFFFF" />
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True" />
                                                <Condition Property="IsMouseCaptured" Value="True" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="Label" Property="Control.Foreground" Value="#EE3416" />
                                        </MultiTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
                                Value="True"/>
                    <Condition Binding="{Binding Status}" Value="{x:Static local:BackupTaskStatus.Processing}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="cancelButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding InSequence}" Value="False">
                <Setter TargetName="index" Property="Visibility" Value="Hidden" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Status}" Value="{x:Static local:BackupTaskStatus.Processing}">
                <Setter TargetName="progress" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Status}" Value="{x:Static local:BackupTaskStatus.Completed}">
                <Setter TargetName="statusIcon" Property="Visibility" Value="Visible" />
                <Setter TargetName="statusIcon" Property="Fill" Value="#7ea4ea" />
                <Setter TargetName="statusIcon" Property="Data" Value="{StaticResource CompletePathIcon}" />
                <Setter TargetName="saveTime" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Status}" Value="{x:Static local:BackupTaskStatus.Failed}">
                <Setter TargetName="index" Property="Visibility" Value="Hidden" />
                <Setter TargetName="statusIcon" Property="Visibility" Value="Visible" />
                <Setter TargetName="statusIcon" Property="Fill" Value="#ff523b" />
                <Setter TargetName="statusIcon" Property="Data" Value="{StaticResource ErrorPathIcon}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InSequence}" Value="False"/>
                    <Condition Binding="{Binding Status}" Value="{x:Static local:BackupTaskStatus.Completed}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="statusIcon" Property="Fill" Value="#aec8ee" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InSequence}" Value="False"/>
                    <Condition Binding="{Binding Status}" Value="{x:Static local:BackupTaskStatus.Failed}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="statusIcon" Property="Fill" Value="#ffa398" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

</ResourceDictionary>